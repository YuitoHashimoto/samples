{"version":3,"sources":["reducks/users/actions.js","reducks/store/initialState.js","reducks/users/reducers.js","reducks/users/selectors.js","firebase/config.js","firebase/index.js","Auth.jsx","reducks/users/operations.js","templates/Home.jsx","components/UIkit/TextInput.jsx","components/UIkit/PrimaryButton.jsx","templates/SignUp.jsx","templates/SignIn.jsx","templates/Reset.jsx","Router.jsx","App.jsx","serviceWorker.js","index.js","reducks/store/store.js"],"names":["signInAction","userState","type","payload","isSignedIn","role","uid","username","initialState","users","UsersReducer","state","action","usersSelector","getIsSignedIn","createSelector","getUserId","getUserName","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","auth","db","firestore","FirebaseTimestamp","storage","functions","Timestamp","Auth","children","dispatch","useDispatch","selector","useSelector","useEffect","a","onAuthStateChanged","user","collection","doc","get","then","snapshot","data","push","Home","console","log","onClick","signOut","TextInput","props","fullWidth","label","margin","multiline","required","rows","value","onChange","useStyles","makeStyles","backgroundColor","color","fontSize","height","mariginButton","width","PrimaryButton","classes","Button","className","button","variant","SignUp","useState","setUsername","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","inputUsername","useCallback","event","target","inputEmail","inputPassword","inputConfirmPassword","alert","createUserWithEmailAndPassword","result","timestamp","now","userInitialData","crewated_at","updated_at","set","signUp","SignIn","signInWithEmailAndPassword","signIn","Reset","sendPasswordResetEmail","catch","resetPassword","Router","exact","path","component","ProductEdit","App","Boolean","window","location","hostname","match","history","History","store","reduxCreateStore","combineReducers","router","connectRouter","applyMiddleware","routerMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2cc5b70f.chunk.js","sourcesContent":["export const SIGN_IN = \"SIGN_IN\";\nexport const signInAction = (userState) => {\n    return {\n        type: \"SIGN_IN\",\n        payload: {\n            isSignedIn: true,\n            role: userState.role,\n            uid: userState.uid,\n            username: userState.username\n        }\n    }\n};\n\nexport const SIGN_OUT = \"SIGN_OUT\";\nexport const signOutAction = () => {\n    return {\n        type: \"SIGN_OUT\",\n        payload: {\n            isSignedIn: false,\n            role: \"\",\n            uid: \"\",\n            username: \"\"\n        }\n    }\n};","const initialState = {\n    users: {\n        isSignedIn: false,\n        role: \"\",\n        uid: \"\",\n        username: \"\"\n    }\n};\n\nexport default initialState","import * as Actions from './actions';\nimport initialState from '../store/initialState';\n\nexport const UsersReducer = (state = initialState.users, action) => {\n    switch (action.type) {\n        case Actions.SIGN_IN:\n            return {\n                ...state,\n                ...action.payload\n            }\n        case Actions.SIGN_OUT:\n            return {\n                ...action.payload\n            }\n        default:\n            return state\n    }\n}","import {createSelector} from 'reselect';\n\nconst usersSelector = (state) => state.users;\n\nexport const getIsSignedIn = createSelector(\n    [usersSelector],\n    state => state.isSignedIn\n)\n\nexport const getUserId = createSelector(\n    [usersSelector],\n    state => state.uid\n)\n\nexport const getUserName = createSelector(\n    [usersSelector],\n    state => state.username\n)","const firebaseConfig = {\n    apiKey: \"AIzaSyBIcYy75L_O-eaVSl4uiYyWVQhzU-5gKSM\",\n    authDomain: \"ec-app-b54b9.firebaseapp.com\",\n    databaseURL: \"https://ec-app-b54b9.firebaseio.com\",\n    projectId: \"ec-app-b54b9\",\n    storageBucket: \"ec-app-b54b9.appspot.com\",\n    messagingSenderId: \"1084820093826\",\n    appId: \"1:1084820093826:web:3c593a6946c24849f7ad9b\",\n    measurementId: \"G-8EM9YVLMXB\"\n  };\n\n  export default firebaseConfig","import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport 'firebase/functions';\nimport firebaseConfig from './config';\n\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const db = firebase.firestore();\nexport const storage = firebase.storage();\nexport const finctions = firebase.functions();\nexport const FirebaseTimestamp = firebase.firestore.Timestamp;","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {getIsSignedIn} from \"./reducks/users/selectors\";\nimport { listenAuthState } from './reducks/users/operations';\nconst Auth = ({children}) => {\n    const dispatch = useDispatch()\n    const selector = useSelector((state) => state);\n    const isSignedIn = getIsSignedIn(selector);\n\n    useEffect(() => {\n        if (!isSignedIn) {\n            dispatch(listenAuthState())\n        }\n    },[]);\n    \n    if (!isSignedIn) {\n        return <></>\n    } else {\n        return children\n    }\n}\n\nexport default Auth;","import { signInAction, signOutAction } from \"./actions\";\nimport {push} from \"connected-react-router\";\nimport {auth, FirebaseTimestamp, db} from \"../../firebase/index\"\n\nexport const listenAuthState = () => {\n    return async (dispatch) => {\n        return auth.onAuthStateChanged(user => {\n            if (user) {\n                const uid = user.uid\n                db.collection('users').doc(uid).get()\n                .then(snapshot => {\n                    const data = snapshot.data()\n\n                    dispatch(signInAction({\n                        isSignedIn: true,\n                        role: data.role,\n                        uid: uid,\n                        username: data.username\n                    }))\n\n                })\n            } else {\n                dispatch(push('/signin'));\n            }\n        })\n    }\n}\n\nexport const resetPassword = (email) => {\n    return async (dispatch) => {\n        if (email === \"\") {\n            alert(\"必須項目が未入力です！\")\n            return false\n        } else {\n            auth.sendPasswordResetEmail(email)\n                .then(() => {\n                    alert('入力されたアドレスにパスワードリセット用のメールを送りました。')\n                    dispatch(push('/signin'))\n                }).catch(() => {\n                    alert('パスワードリセットに失敗しました。')\n                })\n        }\n    }\n}\n\nexport const signIn = (email, password) => {\n    return async (dispatch) => {\n        // Validation\n        if (email === \"\" || password === \"\") {\n            alert (\"必須項目が未入力です\")\n            return false\n        }\n        \n        auth.signInWithEmailAndPassword(email, password)\n            .then(result => {\n                const user = result.user\n\n                if (user) {\n                    const uid = user.uid\n                    db.collection('users').doc(uid).get()\n                    .then(snapshot => {\n                        const data = snapshot.data()\n\n                        dispatch(signInAction({\n                            isSignedIn: true,\n                            role: data.role,\n                            uid: uid,\n                            username: data.username\n                        }))\n\n                        dispatch(push('/'));\n                    })\n                } \n            }) \n    }\n}\n\nexport const signUp = (username, email, password, confirmPassword) => {\n    return async (dispatch) => {\n        // Validation\n        if (username === \"\" || email === \"\" || password === \"\" || confirmPassword === \"\") {\n            alert (\"必須項目が未入力です\")\n            return false\n        }\n\n        if (password !== confirmPassword) {\n            alert (\"パスワードが一致しません。もう一度お試しください。\")\n        }\n\n        return auth.createUserWithEmailAndPassword(email, password)\n            .then(result => {\n                const user = result.user\n                if (user) {\n                    const uid = user.uid\n                    const timestamp = FirebaseTimestamp.now()\n\n                    const userInitialData = {\n                        crewated_at: timestamp,\n                        email: email,\n                        role: \"customer\",\n                        updated_at: timestamp,\n                        username: username\n                    }\n\n                    db.collection('users').doc(uid).set(userInitialData)\n                        .then(() => {\n                            dispatch(push('/'))\n                        }) \n                }\n            })\n    }\n}\n\nexport const signOut = () => {\n    return async (dispatch) => {\n        auth.signOut()\n            .then(() => {\n                dispatch(signOutAction());\n                dispatch(push('/signin'))\n            })\n    }\n}","import React from 'react';\nimport {getUserId, getUserName} from \"../reducks/users/selectors\";\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {push} from \"connected-react-router\";\nimport { signOut } from '../reducks/users/operations';\n\n\nconst Home = () => {\n    const selector = useSelector((state) => state)\n    const uid = getUserId(selector)\n    const username = getUserName(selector);\n    const dispatch = useDispatch()\n\n    console.log(uid)\n    return(\n        <>\n            <h2>Home</h2>\n            <button onClick={() => dispatch(signOut())}>サインアウト</button>\n            <p>ユーザーID：{uid}</p>\n            <p>ユーザー名：{username}</p>\n        </>\n    );\n}\n\nexport default Home;","import React from 'react';\nimport TextFiled from '@material-ui/core/TextField';\n\nconst TextInput = (props) => {\n    return(\n        <TextFiled \n            fullWidth={props.fullWidth}\n            label={props.label}\n            margin=\"dense\"\n            multiline={props.multiline}\n            required={props.required}\n            rows={props.rows}\n            value={props.value}\n            type={props.type}\n            onChange={props.onChange}\n        />\n    )\n}\n\nexport default TextInput","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport {makeStyles} from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n    'button': {\n        backgroundColor: \"#4dd0e1\",\n        color: \"#000\",\n        fontSize: 16,\n        height: 48,\n        mariginButton: 16,\n        width:256\n    }\n})\n\n\nconst PrimaryButton = (props) => {\n    const classes = useStyles()\n    return (\n        <Button className={classes.button} variant=\"contained\" onClick={() => props.onClick()}>\n            {props.label}\n        </Button>\n    )\n}\n\nexport default PrimaryButton","import React,{useCallback, useState} from 'react';\nimport {PrimaryButton, TextInput} from \"../components/UIkit/index\";\nimport {signUp} from \"../reducks/users/operations\";\nimport {useDispatch} from 'react-redux';\nimport {push} from 'connected-react-router'\n\nconst SignUp = () => {\n    const dispatch = useDispatch()\n\n    const [username, setUsername] = useState(\"\"),\n          [email, setEmail] = useState(\"\"),\n          [password, setPassword] = useState(\"\"),\n          [confirmPassword, setConfirmPassword] = useState(\"\");\n\n    const inputUsername = useCallback((event) => {\n        setUsername(event.target.value)\n    },[setUsername])\n\n    const inputEmail = useCallback((event) => {\n        setEmail(event.target.value)\n    },[setEmail])\n\n    const inputPassword = useCallback((event) => {\n        setPassword(event.target.value)\n    },[setPassword])\n\n    const inputConfirmPassword = useCallback((event) => {\n        setConfirmPassword(event.target.value)\n    },[setConfirmPassword])\n\n\n    return(\n        <div className='c-section-container'>\n            <h2 className='u-text__headline u-text-center'>アカウント登録</h2>\n            <div className='module-spacer--medium' />\n            <TextInput\n                fullWidth={true} label={\"ユーザー名\"} multiline={false} required={true}\n                rows={1} value={username} type={\"text\"} onChange={inputUsername}\n            />\n            <TextInput\n                fullWidth={true} label={\"メールアドレス\"} multiline={false} required={true}\n                rows={1} value={email} type={\"email\"} onChange={inputEmail}\n            />\n            <TextInput\n                fullWidth={true} label={\"パスワード\"} multiline={false} required={true}\n                rows={1} value={password} type={\"password\"} onChange={inputPassword}\n            />\n            <TextInput\n                fullWidth={true} label={\"確認パスワード\"} multiline={false} required={true}\n                rows={1} value={confirmPassword} type={\"password\"} onChange={inputConfirmPassword}\n            />\n            <div className='module-spacer--medium' />\n            <div className='center'>\n                <PrimaryButton \n                    label={\"アカウントを登録する\"}\n                    onClick={() => dispatch(signUp(username, email, password, confirmPassword))}\n                />\n            </div>\n            <div className='module-spacer--medium' />\n            <p className={'u-text-center'} onClick={() => dispatch(push('/signin'))}>すでにアカウントをお持ちの方はこちら</p>\n        </div>\n    )\n}\n\nexport default SignUp","import React, {useCallback, useState} from 'react';\nimport {PrimaryButton, TextInput} from \"../components/UIkit/index\";\nimport {signIn} from \"../reducks/users/operations\";\nimport {useDispatch} from 'react-redux';\nimport { push } from 'connected-react-router';\n\nconst SignIn = () => {\n    const dispatch = useDispatch()\n\n    const [email, setEmail] = useState(\"\"),\n          [password, setPassword] = useState(\"\");\n\n\n    const inputEmail = useCallback((event) => {\n        setEmail(event.target.value)\n    },[setEmail])\n\n    const inputPassword = useCallback((event) => {\n        setPassword(event.target.value)\n    },[setPassword])\n\n\n\n    return(\n        <div className='c-section-container'>\n            <h2 className='u-text__headline u-text-center'>サインイン</h2>\n            <div className='module-spacer--medium' />\n            <TextInput\n                fullWidth={true} label={\"メールアドレス\"} multiline={false} required={true}\n                rows={1} value={email} type={\"email\"} onChange={inputEmail}\n            />\n            <TextInput\n                fullWidth={true} label={\"パスワード\"} multiline={false} required={true}\n                rows={1} value={password} type={\"password\"} onChange={inputPassword}\n            />\n            <div className='module-spacer--medium' />\n            <div className='center'>\n                <PrimaryButton \n                    label={\"Sign In.\"}\n                    onClick={() => dispatch(signIn(email, password))}\n                />\n            </div>\n            <div className='module-spacer--medium' />\n            <p className={'u-text-center'} onClick={() => dispatch(push('/signup'))}>アカウントをお持ちでない方はこちら</p>\n            <p className={'u-text-center'} onClick={() => dispatch(push('/reset'))}>パスワードをお忘れの方はこちら</p>\n        </div>\n    )\n}\n\nexport default SignIn","import React, {useCallback, useState} from 'react';\nimport {PrimaryButton, TextInput} from \"../components/UIkit/index\";\nimport {resetPassword} from \"../reducks/users/operations\";\nimport {useDispatch} from 'react-redux';\nimport {push} from 'connected-react-router'\n\nconst Reset = () => {\n    const dispatch = useDispatch()\n\n    const [email, setEmail] = useState(\"\");\n\n\n    const inputEmail = useCallback((event) => {\n        setEmail(event.target.value)\n    },[setEmail])\n\n    return(\n        <div className='c-section-container'>\n            <h2 className='u-text__headline u-text-center'>パスワードのリセット</h2>\n            <div className='module-spacer--medium' />\n            <TextInput\n                fullWidth={true} label={\"メールアドレス\"} multiline={false} required={true}\n                rows={1} value={email} type={\"email\"} onChange={inputEmail}\n            />\n            <div className='module-spacer--medium' />\n            <div className='center'>\n                <PrimaryButton \n                    label={\"Reset Password\"}\n                    onClick={() => dispatch(resetPassword(email))}\n                />\n            </div>\n            <div className='module-spacer--medium' />\n            <p className={'u-text-center'} onClick={() => dispatch(push('/signin'))}>ログイン画面に戻る</p>\n        </div>\n    )\n}\n\nexport default Reset","import React from 'react';\nimport {Route, Switch} from \"react-router\";\nimport Auth from './Auth'\nimport {Home, SignIn,  SignUp, Reset, ProductEdit} from \"./templates\";\n\nconst Router = () => {\n    return(\n        <Switch>\n            <Route exact path={\"/signup\"} component={SignUp} />\n            <Route exact path={\"/signin\"} component={SignIn} />\n            <Route exact path={\"/reset\"} component={Reset} />\n\n            <Auth>\n                <Route exact path={\"(/)?\"} component={Home} />\n                <Route exact path={\"/product/edit\"} component={ProductEdit} />\n            </Auth>\n\n        </Switch>\n    );\n};\n\nexport default Router;","import React from 'react';\nimport Router from \"./Router\";\nimport  \"./assets/reset.css\"\nimport  \"./assets/style.css\"\n\nconst App = () => {\n  return(\n    <main>\n        <Router />\n    </main>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport createStore from './reducks/store/store';\nimport {ConnectedRouter} from 'connected-react-router'\nimport * as History from 'history'\n\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst history = History.createBrowserHistory();\nexport const store = createStore(history);\n\nReactDOM.render(\n  <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <App />\n      </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root'),\n)\nserviceWorker.unregister();\n","import {\n    createStore as reduxCreateStore,\n    combineReducers,\n    applyMiddleware\n} from 'redux';\nimport thunk from 'redux-thunk'\nimport {connectRouter, routerMiddleware} from 'connected-react-router'\n\n// import {ProductsReducer} from '../products/reducers';\nimport {UsersReducer} from '../users/reducers';\n\nexport default function createStore(history){\n    return reduxCreateStore(\n        combineReducers({\n            router: connectRouter(history),\n            users: UsersReducer,\n        }),\n        applyMiddleware(\n            routerMiddleware(history),\n            thunk\n        )\n    );\n}"],"sourceRoot":""}